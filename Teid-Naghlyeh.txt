import React, { useState } from "react";
import { useMount } from "react-use";
import { Row, Col } from "antd";
import DashboardTile from "../../../common/dashboard-tile";
import { MdTransferWithinAStation as RequestIcon } from "react-icons/md";
import Colors from "../../../../resources/colors";
import modulesService from "../../../../services/app/modules-service";

const iconProps = {
  size: 55,
  style: { marginTop: 10 },
};

const mapper = (pageID) => {
  let link = "";
  let icon = null;
  let backColor = Colors.blue[3];

  switch (pageID) {
    case 60:
      link = "transmission-requests";
      icon = <RequestIcon {...iconProps} />;
      backColor = Colors.orange[3];
      break;

    default:
      break;
  }

  return { link, icon, backColor };
};

const UserTransmissionDashboard = () => {
  const [accessiblePages, setAccessiblePages] = useState([]);

  useMount(async () => {
    const transmission_module_id = 8;
    const accessiblePages = await modulesService.accessiblePages(
      transmission_module_id
    );

    setAccessiblePages(accessiblePages);
  });

  return (
    <Row gutter={[10, 16]}>
      {accessiblePages.map((page) => (
        <Col xs={24} md={8} lg={6} key={page.PageID}>
          <DashboardTile
            to={`transmission/${mapper(page.PageID).link}`}
            icon={mapper(page.PageID).icon}
            backColor={mapper(page.PageID).backColor}
            title={page.PageTitle}
          />
        </Col>
      ))}
    </Row>
  );
};

export default UserTransmissionDashboard;

------

import React, { useState } from "react";
import {
  Button,
  Modal,
  Row,
  Col,
  Typography,
  Space,
  Alert,
  Divider,
  Descriptions,
} from "antd";
import { PlusOutlined as PlusIcon } from "@ant-design/icons";
import Words from "../../../../resources/words";
import Colors from "../../../../resources/colors";
import utils from "../../../../tools/utils";
import MemberProfileImage from "../../../common/member-profile-image";
import ResponseModal from "./user-transmission-requests-response-modal";

const { Text } = Typography;

const UserTransmissionRequestsDetailsModal = ({
  request,
  isOpen,
  onOk,
  onResponse,
}) => {
  const [showModal, setShowModal] = useState(false);

  const valueColor = Colors.blue[7];

  const {
    //RowID,
    //MissionID,
    //MemberID,
    FirstName,
    LastName,
    //Mobile,
    PicFileName,
    //TargetID,
    TargetTitle,
    InProvince,
    StartDate,
    FinishDate,
    StartTime,
    FinishTime,
    //MissionTypeID,
    MissionTypeTitle,
    FormatID,
    //OfficialMemberID,
    OfficialFirstName,
    OfficialLastName,
    RequestDate,
    RequestTime,
    TransferTypeID,
    TransferTypeTitle,
    DetailsText,
    //VehicleID,
    Pelak,
    //ProductYear,
    //VehicleTypeID,
    VehicleTypeTitle,
    //ModelID,
    ModelTitle,
    //BrandID,
    BrandTitle,
    //RegMemberID,
    RegFirstName,
    RegLastName,
    RegDate,
    RegTime,
  } = request;

  const getFooterButtons = () => {
    let footerButtons = [
      <Button key="close-button" type="primary" onClick={onOk}>
        {Words.close}
      </Button>,
    ];

    if (TransferTypeID === 0) {
      footerButtons = [
        <Button
          key="submit-button"
          type="primary"
          icon={<PlusIcon />}
          danger
          onClick={() => setShowModal(true)}
        >
          {Words.submit_response}
        </Button>,
        ...footerButtons,
      ];
    }

    return footerButtons;
  };

  return (
    <>
      <Modal
        visible={isOpen}
        maskClosable={false}
        centered={true}
        title={Words.more_details}
        footer={getFooterButtons()}
        onCancel={onOk}
        width={750}
      >
        <section>
          <article
            id="info-content"
            className="scrollbar-normal"
            style={{ maxHeight: "calc(100vh - 180px)" }}
          >
            <Row gutter={[10, 10]}>
              <Col xs={24}>
                <Alert
                  message={
                    <Space>
                      <MemberProfileImage fileName={PicFileName} />
                      <Text>{`${FirstName} ${LastName}`}</Text>
                    </Space>
                  }
                  type="info"
                />
              </Col>
              <Col xs={24}>
                <Descriptions
                  bordered
                  column={{
                    //   md: 2, sm: 2,
                    lg: 2,
                    md: 2,
                    xs: 1,
                  }}
                  size="middle"
                >
                  <Descriptions.Item label={Words.mission_target}>
                    <Space direction="vertical">
                      <Text style={{ color: Colors.purple[6] }}>
                        {TargetTitle}
                      </Text>
                      <Text style={{ color: Colors.grey[6], fontSize: 12 }}>
                        {InProvince ? Words.InProvince : ""}
                      </Text>
                    </Space>
                  </Descriptions.Item>
                  <Descriptions.Item label={Words.request_type}>
                    <Text style={{ color: Colors.green[6] }}>
                      {MissionTypeTitle}
                    </Text>
                  </Descriptions.Item>
                  <Descriptions.Item label={Words.from_date}>
                    <Text style={{ color: valueColor }}>
                      {`${utils.weekDayNameFromText(
                        StartDate
                      )} ${utils.farsiNum(utils.slashDate(StartDate))}`}
                    </Text>
                  </Descriptions.Item>
                  <Descriptions.Item label={Words.to_date}>
                    <Text style={{ color: valueColor }}>
                      {`${utils.weekDayNameFromText(
                        FinishDate
                      )} ${utils.farsiNum(utils.slashDate(FinishDate))}`}
                    </Text>
                  </Descriptions.Item>
                  {FormatID === 1 && (
                    <>
                      <Descriptions.Item label={Words.start_time}>
                        <Text style={{ color: valueColor }}>
                          {utils.farsiNum(utils.colonTime(StartTime))}
                        </Text>
                      </Descriptions.Item>
                      <Descriptions.Item label={Words.finish_time}>
                        <Text style={{ color: valueColor }}>
                          {utils.farsiNum(utils.colonTime(FinishTime))}
                        </Text>
                      </Descriptions.Item>
                    </>
                  )}
                  <Descriptions.Item label={Words.official_manager}>
                    <Text style={{ color: valueColor }}>
                      {`${OfficialFirstName} ${OfficialLastName}`}
                    </Text>
                  </Descriptions.Item>
                  <Descriptions.Item label={Words.reg_date_time}>
                    <Text style={{ color: valueColor }}>
                      {utils.farsiNum(
                        `${utils.slashDate(RequestDate)} - ${utils.colonTime(
                          RequestTime
                        )}`
                      )}
                    </Text>
                  </Descriptions.Item>
                </Descriptions>
                {TransferTypeID > 0 && (
                  <>
                    <Divider orientation="right" plain>
                      {Words.transmission_info}
                    </Divider>
                    <Descriptions
                      bordered
                      column={{
                        //   md: 2, sm: 2,
                        lg: 2,
                        md: 2,
                        xs: 1,
                      }}
                      size="middle"
                    >
                      <Descriptions.Item label={Words.transfer_type} span={2}>
                        <Text style={{ color: Colors.cyan[6] }}>
                          {TransferTypeID === 1
                            ? utils.farsiNum(
                                `${VehicleTypeTitle} ${BrandTitle} ${ModelTitle} - ${Pelak}`
                              )
                            : TransferTypeTitle}
                        </Text>
                      </Descriptions.Item>

                      {DetailsText.length > 0 && (
                        <Descriptions.Item label={Words.descriptions} span={2}>
                          <Text
                            style={{
                              color: Colors.purple[7],
                              whiteSpace: "pre-line",
                            }}
                          >
                            {utils.farsiNum(DetailsText)}
                          </Text>
                        </Descriptions.Item>
                      )}

                      <Descriptions.Item label={Words.transmission_manager}>
                        <Text style={{ color: valueColor }}>
                          {`${RegFirstName} ${RegLastName}`}
                        </Text>
                      </Descriptions.Item>
                      <Descriptions.Item label={Words.reg_date_time}>
                        <Text style={{ color: valueColor }}>
                          {utils.farsiNum(
                            `${utils.slashDate(RegDate)} - ${utils.colonTime(
                              RegTime
                            )}`
                          )}
                        </Text>
                      </Descriptions.Item>
                    </Descriptions>
                  </>
                )}
              </Col>
            </Row>
          </article>
        </section>
      </Modal>

      {showModal && (
        <ResponseModal
          onOk={onResponse}
          onCancel={() => setShowModal(false)}
          isOpen={showModal}
          request={request}
        />
      )}
    </>
  );
};

export default UserTransmissionRequestsDetailsModal;

------

import React from "react";
import { useMount } from "react-use";
import { Spin, Row, Col, Typography, Button, message, Space } from "antd";
import { InfoCircleOutlined as InfoIcon } from "@ant-design/icons";
import Words from "../../../../resources/words";
import utils from "../../../../tools/utils";
import service from "../../../../services/official/transmission/user-transmission-requests";
import {
  getSorter,
  checkAccess,
  getColumns,
  GetSimplaDataPageMethods,
  handleError,
} from "../../../../tools/form-manager";
import SimpleDataTable from "../../../common/simple-data-table";
import SimpleDataPageHeader from "../../../common/simple-data-page-header";
import { usePageContext } from "../../../contexts/page-context";
import Colors from "../../../../resources/colors";
import SearchModal from "./user-transmission-requests-search-modal";
import DetailsModal from "./user-transmission-requests-details-modal";

const { Text } = Typography;

const getSheets = (records) => [
  {
    title: "TransmissionRequests",
    data: records,
    columns: [
      { label: Words.id, value: "RowID" },
      {
        label: Words.full_name,
        value: (record) => `${record.FirstName} ${record.LastName}`,
      },
      {
        label: Words.mission_target,
        value: (record) => `${record.TargetTitle}`,
      },
      {
        label: Words.in_province,
        value: (record) => (record.InProvince ? Words.yes : Words.no),
      },
      {
        label: Words.mission_format,
        value: (record) =>
          record.FormatID === 1 ? Words.by_hour : Words.by_day,
      },
      {
        label: Words.mission_type,
        value: (record) => `${record.MissionTypeTitle}`,
      },
      {
        label: Words.official_manager,
        value: (record) =>
          `${record.OfficialFirstName} ${record.OfficialLastName}`,
      },
      {
        label: Words.request_reg_date,
        value: (record) => utils.slashDate(record.RequestDate),
      },
      {
        label: Words.request_reg_time,
        value: (record) => utils.colonTime(record.RequestTime),
      },
      {
        label: Words.from_date,
        value: (record) => utils.slashDate(record.StartDate),
      },
      {
        label: Words.from_time,
        value: (record) => utils.colonTime(record.StartTime),
      },
      {
        label: Words.to_date,
        value: (record) => utils.slashDate(record.FinishDate),
      },
      {
        label: Words.to_time,
        value: (record) => utils.colonTime(record.FinishTime),
      },
      {
        label: Words.transfer_type,
        value: (record) => record.TransferTypeTitle,
      },
      {
        label: Words.pelak,
        value: (record) => record.Pelak,
      },
      {
        label: Words.product_year,
        value: (record) => record.Pelak,
      },
      {
        label: Words.brand,
        value: (record) => record.BrandTitle,
      },
      {
        label: Words.model,
        value: (record) => record.ModelTitle,
      },
      {
        label: Words.vehicle_type,
        value: (record) => record.VehicleTypeTitle,
      },
      {
        label: Words.descriptions,
        value: (record) => record.DetailsText,
      },
    ],
  },
];

const baseColumns = [
  {
    title: Words.id,
    width: 75,
    align: "center",
    dataIndex: "RowID",
    sorter: getSorter("RowID"),
    render: (RowID) => <Text>{utils.farsiNum(`${RowID}`)}</Text>,
  },
  {
    title: Words.requester,
    width: 150,
    align: "center",
    sorter: getSorter("LastName"),
    render: (record) => (
      <Text
        style={{ color: Colors.red[7] }}
      >{`${record.FirstName} ${record.LastName}`}</Text>
    ),
  },
  {
    title: Words.mission_type,
    width: 120,
    align: "center",
    dataIndex: "MissionTypeTitle",
    sorter: getSorter("MissionTypeTitle"),
    render: (MissionTypeTitle) => (
      <Text style={{ color: Colors.blue[6] }}>{MissionTypeTitle}</Text>
    ),
  },
  {
    title: Words.from,
    width: 150,
    align: "center",
    sorter: getSorter("StartDate"),
    render: (record) => (
      <>
        {record.StartTime.length === 0 ? (
          <Text style={{ color: Colors.green[6] }}>
            {`${utils.weekDayNameFromText(record.StartDate)} - ${utils.farsiNum(
              utils.slashDate(record.StartDate)
            )}`}
          </Text>
        ) : (
          <Space direction="vertical">
            <Text style={{ color: Colors.green[6] }}>
              {`${utils.weekDayNameFromText(
                record.StartDate
              )} - ${utils.farsiNum(utils.slashDate(record.StartDate))}`}
            </Text>

            <Text style={{ color: Colors.magenta[6] }}>
              {`${utils.farsiNum(utils.colonTime(record.StartTime))}`}
            </Text>
          </Space>
        )}
      </>
    ),
  },
  {
    title: Words.to,
    width: 150,
    align: "center",
    sorter: getSorter("FinishDate"),
    render: (record) => (
      <>
        {record.FinishTime.length === 0 ? (
          <Text style={{ color: Colors.green[6] }}>
            {`${utils.weekDayNameFromText(
              record.FinishDate
            )} - ${utils.farsiNum(utils.slashDate(record.FinishDate))}`}
          </Text>
        ) : (
          <Space direction="vertical">
            <Text style={{ color: Colors.green[6] }}>
              {`${utils.weekDayNameFromText(
                record.FinishDate
              )} - ${utils.farsiNum(utils.slashDate(record.FinishDate))}`}
            </Text>

            <Text style={{ color: Colors.magenta[6] }}>
              {`${utils.farsiNum(utils.colonTime(record.FinishTime))}`}
            </Text>
          </Space>
        )}
      </>
    ),
  },
  {
    title: Words.mission_target,
    width: 200,
    align: "center",
    sorter: getSorter("TargetTitle"),
    render: (record) => (
      <Space direction="vertical">
        <Text style={{ color: Colors.purple[6] }}>{record.TargetTitle}</Text>
        <Text style={{ color: Colors.grey[6], fontSize: 12 }}>
          {record.InProvince ? Words.inside_province : ""}
        </Text>
      </Space>
    ),
  },
];

const handleCheckEditable = (row) => false;
const handleCheckDeletable = (row) => false;

const recordID = "RowID";

const UserTransmissionRequestsPage = ({ pageName }) => {
  const {
    progress,
    setProgress,
    searched,
    setSearched,
    records,
    setRecords,
    access,
    setAccess,
    selectedObject,
    setSelectedObject,
    showDetails,
    setShowDetails,
    showSearchModal,
    setShowSearchModal,
    filter,
    setFilter,
  } = usePageContext();

  useMount(async () => {
    handleResetContext();

    await checkAccess(setAccess, pageName);

    const default_filter_for_new_requests = {
      SearchTypeID: 1,
      MemberID: 0,
      MissionTypeID: 0,
      TargetID: 0,
      RequestFromDate: "",
      RequestToDate: "",
      MissionFromDate: "",
      MissionToDate: "",
    };

    setFilter(default_filter_for_new_requests);

    //------

    setProgress(true);

    try {
      await handleAdvancedSearch(default_filter_for_new_requests);
    } catch (err) {
      handleError(err);
    }

    setProgress(false);
  });

  const { handleEdit, handleDelete, handleResetContext, handleAdvancedSearch } =
    GetSimplaDataPageMethods({
      service,
      recordID,
    });

  const getOperationalButtons = (record) => {
    return (
      <>
        {record.RegTypeID !== 1 && (
          <Button
            type="link"
            icon={<InfoIcon style={{ color: Colors.green[6] }} />}
            onClick={() => {
              setSelectedObject(record);
              setShowDetails(true);
            }}
          />
        )}
      </>
    );
  };

  const columns = access
    ? getColumns(
        baseColumns,
        getOperationalButtons,
        access,
        handleEdit,
        handleDelete,
        handleCheckEditable,
        handleCheckDeletable
      )
    : [];

  const handleClear = () => {
    setRecords([]);
    setFilter(null);
    setSearched(false);
  };

  //------

  const handleSaveResponse = async (response) => {
    const data = await service.saveResponse(response);

    const index = records.findIndex((v) => (v.RowID = response.RowID));
    records[index] = data;
    setSelectedObject(data);

    message.success(Words.messages.your_response_submitted);
  };

  return (
    <>
      <Spin spinning={progress}>
        <Row gutter={[10, 15]}>
          <SimpleDataPageHeader
            title={Words.transmission_requests}
            sheets={getSheets(records)}
            fileName="TransmissionRequests"
            onSearch={() => setShowSearchModal(true)}
            onClear={handleClear}
            onGetAll={null}
            onAdd={null}
          />

          <Col xs={24}>
            {searched && (
              <SimpleDataTable records={records} columns={columns} />
            )}
          </Col>
        </Row>
      </Spin>

      {showSearchModal && (
        <SearchModal
          onOk={handleAdvancedSearch}
          onCancel={() => setShowSearchModal(false)}
          isOpen={showSearchModal}
          filter={filter}
        />
      )}

      {showDetails && (
        <DetailsModal
          onOk={() => {
            setShowDetails(false);
            setSelectedObject(null);
          }}
          isOpen={showDetails}
          request={selectedObject}
          onResponse={handleSaveResponse}
        />
      )}
    </>
  );
};

export default UserTransmissionRequestsPage;

------

import React from "react";
import { useMount } from "react-use";
import { Form, Row, Col, Button, Modal, Popconfirm } from "antd";
import {
  QuestionCircleOutlined as QuestionIcon,
  CheckOutlined as CheckIcon,
} from "@ant-design/icons";
import Joi from "joi-browser";
import Words from "../../../../resources/words";
import {
  validateForm,
  loadFieldsValue,
  initModal,
  handleError,
} from "../../../../tools/form-manager";
import {
  useModalContext,
  useResetContext,
} from "../../../contexts/modal-context";
import InputItem from "../../../form-controls/input-item";
import DropdownItem from "../../../form-controls/dropdown-item";
import service from "../../../../services/official/transmission/user-transmission-requests";

const schema = {
  TransferTypeID: Joi.number().min(1).required(),
  VehicleID: Joi.number(),
  DetailsText: Joi.string()
    .allow("")
    .max(512)
    .regex(/^[آ-یa-zA-Z0-9.\-()\s]+$/)
    .label(Words.descriptions),
};

const initRecord = {
  TransferTypeID: 0,
  VehicleID: 0,
  DetailsText: "",
};

const formRef = React.createRef();

const UserTransmissionRequestsResponseModal = ({
  isOpen,
  request,
  onOk,
  onCancel,
}) => {
  const {
    progress,
    setProgress,
    record,
    setRecord,
    transferTypes,
    setTransferTypes,
    vehicles,
    setVehicles,
    errors,
    setErrors,
  } = useModalContext();

  const resetContext = useResetContext();

  const formConfig = {
    schema,
    record,
    setRecord,
    errors,
    setErrors,
  };

  const clearRecord = async () => {
    record.TransferTypeID = 0;
    record.VehicleID = false;
    record.DetailsText = "";

    setRecord(record);
    setErrors({});
    loadFieldsValue(formRef, record);
  };

  useMount(async () => {
    resetContext();

    setRecord(initRecord);
    initModal(formRef, initRecord, setRecord);

    try {
      const data = await service.getResponseParams();

      const { TransferTypes, Vehicles } = data;

      setTransferTypes(TransferTypes);
      setVehicles(Vehicles);
    } catch (err) {
      handleError(err);
    }
  });

  const handleSubmit = async (record) => {
    setProgress(true);

    try {
      record.MissionID = request.MissionID;
      await onOk(record);
      onCancel();
    } catch (err) {
      handleError(err);
      setProgress(false);
    }
  };

  const disabled = validateForm({ record, schema }) && true;

  const getFooterButtons = () => {
    let footerButtons = [
      <Popconfirm
        title={Words.questions.sure_to_submit_response}
        onConfirm={async () => await handleSubmit(record)}
        okText={Words.yes}
        cancelText={Words.no}
        icon={<QuestionIcon style={{ color: "red" }} />}
        key="submit-confirm"
      >
        <Button
          type="primary"
          icon={<CheckIcon />}
          danger
          loading={progress}
          disabled={disabled}
        >
          {Words.submit}
        </Button>
      </Popconfirm>,

      <Button key="clear-button" onClick={clearRecord}>
        {Words.clear}
      </Button>,

      <Button key="close-button" onClick={onOk}>
        {Words.close}
      </Button>,
    ];

    return footerButtons;
  };

  const handleSelectTransferType = (value) => {
    record.TransferTypeID = value;

    if (value !== 1) {
      record.VehicleID = 0;

      schema.VehicleID = Joi.number();
      schema.DetailsText = Joi.string()
        .min(5)
        .max(512)
        .regex(/^[آ-یa-zA-Z0-9.\-()\s]+$/)
        .required()
        .label(Words.descriptions);
    } else {
      schema.VehicleID = Joi.number().min(1).required();
      schema.DetailsText = Joi.string()
        .allow("")
        .max(512)
        .regex(/^[آ-یa-zA-Z0-9.\-()\s]+$/)
        .label(Words.descriptions);
    }

    setRecord({ ...record });
    loadFieldsValue(formRef, record);
  };

  return (
    <Modal
      visible={isOpen}
      maskClosable={false}
      centered={true}
      title={Words.newInfo}
      footer={getFooterButtons()}
      onCancel={onCancel}
      width={750}
    >
      <Form ref={formRef} name="dataForm">
        <Row gutter={[5, 1]} style={{ marginLeft: 1 }}>
          <Col xs={24}>
            <DropdownItem
              title={Words.transfer_type}
              dataSource={transferTypes}
              keyColumn="TransferTypeID"
              valueColumn="Title"
              formConfig={formConfig}
              required
              onChange={handleSelectTransferType}
            />
          </Col>

          {record.TransferTypeID === 1 && (
            <Col xs={24}>
              <DropdownItem
                title={Words.vehicle}
                dataSource={vehicles}
                keyColumn="VehicleID"
                valueColumn="Title"
                formConfig={formConfig}
                required
              />
            </Col>
          )}

          <Col xs={24}>
            <InputItem
              horizontal
              title={Words.descriptions}
              fieldName="DetailsText"
              formConfig={formConfig}
              multiline
              rows={7}
              maxLength={512}
              showCount
              required={record.TransferTypeID !== 1}
            />
          </Col>
        </Row>
      </Form>
    </Modal>
  );
};

export default UserTransmissionRequestsResponseModal;

------

import React from "react";
import { useMount } from "react-use";
import { Form, Row, Col } from "antd";
import Joi from "joi-browser";
import ModalWindow from "../../../common/modal-window";
import Words from "../../../../resources/words";
import {
  validateForm,
  loadFieldsValue,
  initModal,
  handleError,
} from "../../../../tools/form-manager";
import {
  useModalContext,
  useResetContext,
} from "../../../contexts/modal-context";
import service from "../../../../services/official/transmission/user-transmission-requests";
import DropdownItem from "../../../form-controls/dropdown-item";
import DateItem from "../../../form-controls/date-item";

const schema = {
  SearchTypeID: Joi.number().min(1).required().label(Words.search_type),
  MemberID: Joi.number(),
  MissionTypeID: Joi.number(),
  TargetID: Joi.number(),
  RequestFromDate: Joi.string().allow(""),
  RequestToDate: Joi.string().allow(""),
  MissionFromDate: Joi.string().allow(""),
  MissionToDate: Joi.string().allow(""),
};

const initRecord = {
  SearchTypeID: 0,
  MemberID: 0,
  MissionTypeID: 0,
  TargetID: 0,
  RequestFromDate: "",
  RequestToDate: "",
  MissionFromDate: "",
  MissionToDate: "",
};

const formRef = React.createRef();

const UserTransmissionRequestsSearchModal = ({
  isOpen,
  filter,
  onOk,
  onCancel,
}) => {
  const {
    progress,
    setProgress,
    record,
    setRecord,
    errors,
    setErrors,
    members,
    setMembers,
    searchTypes,
    setSearchTypes,
    missionTypes,
    setMissionTypes,
    missionTargets,
    setMissionTargets,
  } = useModalContext();

  const resetContext = useResetContext();

  const formConfig = {
    schema,
    record,
    setRecord,
    errors,
    setErrors,
  };

  const clearRecord = () => {
    record.SearchTypeID = 0;
    record.MemberID = 0;
    record.MissionTypeID = 0;
    record.TargetID = 0;
    record.RequestFromDate = "";
    record.RequestToDate = "";
    record.MissionFromDate = "";
    record.MissionToDate = "";

    setRecord(record);
    setErrors({});
    loadFieldsValue(formRef, record);
  };

  useMount(async () => {
    resetContext();

    setRecord(initRecord);
    initModal(formRef, filter, setRecord);

    setProgress(true);
    try {
      const data = await service.getParams();

      const { SearchTypes, MissionTypes, Targets, Members } = data;

      setSearchTypes(SearchTypes);
      setMissionTypes(MissionTypes);
      setMissionTargets(Targets);
      setMembers(Members);
    } catch (err) {
      handleError(err);
    }
    setProgress(false);
  });

  return (
    <ModalWindow
      isOpen={isOpen}
      inProgress={progress}
      disabled={validateForm({ record, schema }) && true}
      searchModal
      onClear={clearRecord}
      onSubmit={() => onOk(record)}
      onCancel={onCancel}
      width={750}
    >
      <Form ref={formRef} name="dataForm">
        <Row gutter={[10, 5]} style={{ marginLeft: 1 }}>
          <Col xs={24} md={12}>
            <DropdownItem
              title={Words.search_type}
              dataSource={searchTypes}
              keyColumn="SearchTypeID"
              valueColumn="Title"
              formConfig={formConfig}
              required
            />
          </Col>
          <Col xs={24} md={12}>
            <DropdownItem
              title={Words.mission_type}
              dataSource={missionTypes}
              keyColumn="MissionTypeID"
              valueColumn="Title"
              formConfig={formConfig}
              required
            />
          </Col>
          <Col xs={24} md={12}>
            <DropdownItem
              title={Words.employee}
              dataSource={members}
              keyColumn="MemberID"
              valueColumn="FullName"
              formConfig={formConfig}
            />
          </Col>
          <Col xs={24} md={12}>
            <DropdownItem
              title={Words.mission_target}
              dataSource={missionTargets}
              keyColumn="TargetID"
              valueColumn="Title"
              formConfig={formConfig}
            />
          </Col>
          <Col xs={24} md={12}>
            <DateItem
              horizontal
              title={Words.mission_from_date}
              fieldName="MissionFromDate"
              formConfig={formConfig}
            />
          </Col>
          <Col xs={24} md={12}>
            <DateItem
              horizontal
              title={Words.mission_to_date}
              fieldName="MissionToDate"
              formConfig={formConfig}
            />
          </Col>
          <Col xs={24} md={12}>
            <DateItem
              horizontal
              title={Words.request_from_date}
              fieldName="ReuqestFromDate"
              formConfig={formConfig}
            />
          </Col>
          <Col xs={24} md={12}>
            <DateItem
              horizontal
              title={Words.request_to_date}
              fieldName="ReuqestToDate"
              formConfig={formConfig}
            />
          </Col>
        </Row>
      </Form>
    </ModalWindow>
  );
};

export default UserTransmissionRequestsSearchModal;

------

import http from "../../http-service";
import { apiUrl } from "../../../config.json";

const apiEndpoint =
  apiUrl + "/official/transmission/user-transmission-requests";

async function getResponseParams() {
  const { data } = await http.get(`${apiEndpoint}/params/response`);

  return data;
}

async function getParams() {
  const { data } = await http.get(`${apiEndpoint}/params`);

  return data;
}

async function searchData(filter) {
  const { data } = await http.post(`${apiEndpoint}/search`, filter);

  return data;
}

async function saveResponse(response) {
  const { data } = await http.post(`${apiEndpoint}/response`, response);

  return data;
}

const service = {
  getResponseParams,
  getParams,
  searchData,
  saveResponse,
};

export default service;

------

const express = require("express");
const auth = require("../../../middlewares/auth");
const router = express.Router();
const { selectQuery } = require("../../../startup/db");

router.get("/params/response", auth, async (req, res) => {
  const { MemberID } = req.user;

  let result = await selectQuery(
    `EXEC TransmissionAPI.GetTransmissionResponseParams ${MemberID}`
  );

  result = result.recordset[0];

  if (result.Error) return res.status(400).send(result);

  for (const key in result) {
    result[key] = JSON.parse(result[key]);
  }

  res.send(result);
});

router.get("/params", auth, async (req, res) => {
  const { MemberID } = req.user;

  let result = await selectQuery(
    `EXEC TransmissionAPI.GetTransmissionRequestsParams ${MemberID}`
  );

  result = result.recordset[0];

  if (result.Error) return res.status(400).send(result);

  for (const key in result) {
    result[key] = JSON.parse(result[key]);
  }

  res.send(result);
});

router.post("/search", auth, async (req, res) => {
  const { MemberID } = req.user;

  let result = await selectQuery(
    `EXEC TransmissionAPI.SearchTransmissionRequests ${MemberID}, N'${JSON.stringify(
      req.body
    )}'`
  );

  res.send(result.recordset);
});

router.post("/response", auth, async (req, res) => {
  const { MemberID } = req.user;

  let result = await selectQuery(
    `EXEC TransmissionAPI.SaveTransmissionResponse ${MemberID}, N'${JSON.stringify(
      req.body
    )}'`
  );

  result = result.recordset[0];

  if (result.Error) return res.status(400).send(result);

  res.send(result);
});

module.exports = router;

------


ALTER PROCEDURE [TransmissionAPI].[GetTransmissionRequestsParams]
	@memberID	int
AS
BEGIN
	IF (AppAPI.HasPageAccess(@memberID, N'user-TransmissionRequests') = 0)
		SELECT N'دسترسی غیرمجاز' AS Error
	ELSE BEGIN
		DECLARE 
			@missionTypes	nvarchar(MAX) = N'[]'
			,@searchTypes	nvarchar(MAX) = N'[]'
			,@targets		nvarchar(MAX) = N'[]'
			,@dateTime		nvarchar(MAX) = N'[]'
			,@members		nvarchar(MAX) = N'[]'
			
		--======

		SET @missionTypes = dbo.NullToJsonArray((
			SELECT
				MissionTypeID
				,Title
			FROM
				Timex.MissionTypes
			FOR JSON PATH
		))

		--======

		SET @targets = dbo.NullToJsonArray((
			SELECT
				TargetID
				,Title
				,InProvince
			FROM
				Timex.MissionTargets
			FOR JSON PATH
		))

		--======

		SET @members = (
			SELECT
				e.MemberID								AS MemberID
				,m.FirstName + SPACE(1) + m.LastName	AS FullName
			FROM
				Org.Employees e LEFT OUTER JOIN Org.Members m
				ON e.MemberID = m.MemberID
			ORDER BY
				m.LastName
				,m.FirstName
			FOR JSON PATH
		)

		--======

		SELECT @searchTypes = (
			SELECT	
				SearchTypeID
				,Title
			FROM (
				SELECT 1 AS SearchTypeID, N'درخواست جدید' AS Title
				UNION
				SELECT 2 AS SearchTypeID, N'بررسی شده' AS Title
			) AS t
			ORDER BY
				SearchTypeID
			FOR JSON PATH
		)

		--======

		SET @dateTime = (
			SELECT
				CurrentDate
				,CurrentTime
			FROM (
				SELECT
					dbo.CurrentPersianDate()	AS CurrentDate
					,dbo.CurrentFullTime()		AS CurrentTime
			) AS t
			FOR JSON PATH, WITHOUT_ARRAY_WRAPPER
		)

		--======

		SELECT
			@missionTypes	AS MissionTypes
			,@searchTypes	AS SearchTypes
			,@targets		AS Targets
			,@members		AS Members
			,@dateTime		AS CurrentDateTime
	END
END

------

ALTER PROCEDURE [TransmissionAPI].[GetTransmissionResponseParams]
	@memberID	int
AS
BEGIN
	IF (AppAPI.HasPageAccess(@memberID, N'user-TransmissionRequests') = 0)
		SELECT N'دسترسی غیرمجاز' AS Error
	ELSE BEGIN
		DECLARE 
			@transferTypes	nvarchar(MAX) = N'[]'
			,@vehicles		nvarchar(MAX) = N'[]'

		--======
		
		SET @transferTypes = dbo.NullToJsonArray((
			SELECT
				TransferTypeID
				,Title
			FROM
				Transmission.TransferTypes
			ORDER BY
				TransferTypeID
			FOR JSON PATH
		))

		--======

		SET @vehicles = (
			SELECT
				v.VehicleID
				,t.Title + SPACE(1) + b.Title + SPACE(1) + m.Title + SPACE(1) + N' - ' + v.Pelak + N' (' + CONVERT(nvarchar(50), v.ProductYear) + N')' AS Title
			FROM
				Transmission.Vehicles v LEFT OUTER JOIN Transmission.VehicleTypes t
				ON v.VehicleTypeID = t.VehicleTypeID
				LEFT OUTER JOIN Transmission.VehicleModels m
				ON v.ModelID = m.ModelID
				LEFT OUTER JOIN Transmission.VehicleBrands b
				ON m.BrandID = b.BrandID
			ORDER BY
				t.Title
				,b.Title
				,m.Title
				,v.ProductYear
			FOR JSON PATH
		)

		--======

		SELECT
			@transferTypes	AS TransferTypes
			,@vehicles		AS Vehicles
	END
END

------

ALTER PROCEDURE [TransmissionAPI].[SaveTransmissionResponse]
	@memberID	int
	,@jsonData	nvarchar(MAX) 
AS
BEGIN
	IF (AppAPI.HasPageAccess(@memberID, N'user-TransmissionRequests') = 0)
		SELECT N'دسترسی غیر مجاز' AS Error
	ELSE BEGIN
		DECLARE
			@missionID			int
			,@transferTypeID	int
			,@vehicleID			int
			,@detailsText		nvarchar(512)
			--======
			,@rowID				int
			,@currentDate		nvarchar(8) = dbo.CurrentPersianDate()
			,@currentTime		nvarchar(6) = dbo.CurrentFullTime()

		--=========

		SELECT
			@missionID			= MissionID
			,@transferTypeID	= TransferTypeID
			,@vehicleID			= VehicleID
			,@detailsText		= DetailsText
		FROM OPENJSON(@jsonData)
		WITH (
			MissionID		int
			,TransferTypeID	int
			,VehicleID		int
			,DetailsText	nvarchar(512)
		)

		--======

		SELECT
			@rowID	= RowID
		FROM
			Timex.MissionVehicles
		WHERE
			(MissionID = @missionID)
			AND (TransferTypeID <> 0)

		--======

		IF (@rowID > 0)
			SELECT N'مجاز به ثبت اطلاعات ترابری نمی باشید' AS Error
		ELSE BEGIN
			UPDATE Timex.MissionVehicles
			SET
				TransferTypeID	= @transferTypeID
				,VehicleID		= @vehicleID
				,DetailsText	= @detailsText
				,RegMemberID	= @memberID
				,RegDate		= @currentDate
				,RegTime		= @currentTime
			WHERE
				(MissionID = @missionID)

			--=========

			SELECT
				mv.RowID
				,mv.MissionID
				,ms.MemberID
				,m.FirstName
				,m.LastName
				,m.Mobile
				,m.PicFileName
				,ms.TargetID
				,t.Title						AS TargetTitle
				,t.InProvince
				,ms.StartDate
				,ms.FinishDate
				,ms.StartTime
				,ms.FinishTime
				,ms.MissionTypeID
				,mt.Title						AS MissionTypeTitle
				,mt.FormatID
				,ms.OfficialMemberID
				,om.FirstName					AS OfficialFirstName
				,om.LastName					AS OfficialLastName
				,ms.OfficialResponseDate		AS RequestDate
				,ms.OfficialResponseTime		AS RequestTime
				,mv.TransferTypeID
				,dbo.NullString(tt.Title)		AS TransferTypeTitle
				,mv.DetailsText
				,mv.VehicleID
				,dbo.NullString(v.Pelak)		AS Pelak
				,dbo.NullString(v.ProductYear)	AS ProductYear
				,dbo.NullInt(v.VehicleTypeID)	AS VehicleTypeID
				,dbo.NullString(vt.Title)		AS VehicleTypeTitle
				,dbo.NullInt(v.ModelID)			AS ModelID
				,dbo.NullString(md.Title)		AS ModelTitle
				,dbo.NullInt(md.BrandID)		AS BrandID
				,dbo.NullString(b.Title)		AS BrandTitle
				,mv.RegMemberID
				,tm.FirstName					AS RegFirstName
				,tm.LastName					AS RegLastName
				,mv.RegDate
				,mv.RegTime
			FROM
				Timex.MissionVehicles mv LEFT OUTER JOIN Timex.Missions ms
				ON mv.MissionID = ms.MissionID
				LEFT OUTER JOIN Org.Members m
				ON ms.MemberID = m.MemberID
				LEFT OUTER JOIN Timex.MissionTargets t
				ON ms.TargetID = t.TargetID
				LEFT OUTER JOIN Timex.MissionTypes mt
				ON ms.MissionTypeID = mt.MissionTypeID
				LEFT OUTER JOIN Org.Members om
				ON ms.OfficialMemberID = om.MemberID
				LEFT OUTER JOIN Transmission.TransferTypes tt
				ON mv.TransferTypeID = tt.TransferTypeID
				LEFT OUTER JOIN Transmission.Vehicles v
				ON mv.VehicleID = v.VehicleID
				LEFT OUTER JOIN Transmission.VehicleTypes vt
				ON v.VehicleTypeID = vt.VehicleTypeID
				LEFT OUTER JOIN Transmission.VehicleModels md
				ON v.ModelID = md.ModelID
				LEFT OUTER JOIN Transmission.VehicleBrands b
				ON md.BrandID = b.BrandID
				LEFT OUTER JOIN Org.Members tm
				ON mv.RegMemberID = tm.MemberID
			WHERE
				(mv.MissionID = @missionID)
		END
	END
END

------

ALTER PROCEDURE [TransmissionAPI].[SearchTransmissionRequests]
	@memberID	int
	,@jsonData	nvarchar(MAX)
AS
BEGIN
	IF (AppAPI.HasPageAccess(@memberID, N'user-TransmissionRequests') = 0)
		SELECT N'دسترسی غیر مجاز' AS Error
	ELSE BEGIN
		DECLARE
			@searchTypeID		int
			,@request_memberID	int
			,@missionTypeID		int
			,@targetID			int
			,@requestFromDate	nvarchar(8)
			,@requestToDate		nvarchar(8)
			,@missionFromDate	nvarchar(8)
			,@missionToDate		nvarchar(8)

		SELECT
			@searchTypeID		= SearchTypeID
			,@request_memberID	= MemberID
			,@missionTypeID		= MissionTypeID
			,@targetID			= TargetID
			,@requestFromDate	= RequestFromDate
			,@requestToDate		= RequestToDate
			,@missionFromDate	= MissionFromDate
			,@missionToDate		= MissionToDate
		FROM OPENJSON(@jsonData)
		WITH (
			SearchTypeID		int
			,MemberID			int
			,MissionTypeID		int
			,TargetID			int
			,RequestFromDate	nvarchar(8)
			,RequestToDate		nvarchar(8)
			,MissionFromDate	nvarchar(8)
			,MissionToDate		nvarchar(8)
		)

		--======

		SELECT
			mv.RowID
			,mv.MissionID
			,ms.MemberID
			,m.FirstName
			,m.LastName
			,m.Mobile
			,m.PicFileName
			,ms.TargetID
			,t.Title						AS TargetTitle
			,t.InProvince
			,ms.StartDate
			,ms.FinishDate
			,ms.StartTime
			,ms.FinishTime
			,ms.MissionTypeID
			,mt.Title						AS MissionTypeTitle
			,mt.FormatID
			,ms.OfficialMemberID
			,om.FirstName					AS OfficialFirstName
			,om.LastName					AS OfficialLastName
			,ms.OfficialResponseDate		AS RequestDate
			,ms.OfficialResponseTime		AS RequestTime
			,mv.TransferTypeID
			,dbo.NullString(tt.Title)		AS TransferTypeTitle
			,mv.DetailsText
			,mv.VehicleID
			,dbo.NullString(v.Pelak)		AS Pelak
			,dbo.NullString(v.ProductYear)	AS ProductYear
			,dbo.NullInt(v.VehicleTypeID)	AS VehicleTypeID
			,dbo.NullString(vt.Title)		AS VehicleTypeTitle
			,dbo.NullInt(v.ModelID)			AS ModelID
			,dbo.NullString(md.Title)		AS ModelTitle
			,dbo.NullInt(md.BrandID)		AS BrandID
			,dbo.NullString(b.Title)		AS BrandTitle
			,mv.RegMemberID
			,dbo.NullString(tm.FirstName)	AS RegFirstName
			,dbo.NullString(tm.LastName)	AS RegLastName
			,mv.RegDate
			,mv.RegTime
		FROM
			Timex.MissionVehicles mv LEFT OUTER JOIN Timex.Missions ms
			ON mv.MissionID = ms.MissionID
			LEFT OUTER JOIN Org.Members m
			ON ms.MemberID = m.MemberID
			LEFT OUTER JOIN Timex.MissionTargets t
			ON ms.TargetID = t.TargetID
			LEFT OUTER JOIN Timex.MissionTypes mt
			ON ms.MissionTypeID = mt.MissionTypeID
			LEFT OUTER JOIN Org.Members om
			ON ms.OfficialMemberID = om.MemberID
			LEFT OUTER JOIN Transmission.TransferTypes tt
			ON mv.TransferTypeID = tt.TransferTypeID
			LEFT OUTER JOIN Transmission.Vehicles v
			ON mv.VehicleID = v.VehicleID
			LEFT OUTER JOIN Transmission.VehicleTypes vt
			ON v.VehicleTypeID = vt.VehicleTypeID
			LEFT OUTER JOIN Transmission.VehicleModels md
			ON v.ModelID = md.ModelID
			LEFT OUTER JOIN Transmission.VehicleBrands b
			ON md.BrandID = b.BrandID
			LEFT OUTER JOIN Org.Members tm
			ON mv.RegMemberID = tm.MemberID
		WHERE
			(
				(@searchTypeID = 1 AND mv.TransferTypeID = 0)		-- new requests
				OR (@searchTypeID > 1 AND mv.TransferTypeID <> 0)	-- answered requests
			)
			AND (@request_memberID = 0 OR ms.MemberID = @request_memberID)
			AND (@missionTypeID = 0 OR ms.MissionTypeID = @missionTypeID)
			AND (@targetID = 0 OR ms.TargetID = @targetID)
			AND (LEN(@missionFromDate) = 0 OR ms.StartDate >= @missionFromDate)
			AND (LEN(@missionToDate) = 0 OR ms.FinishDate <= @missionToDate)
			AND (LEN(@requestFromDate) = 0 OR ms.OfficialResponseDate >= @requestFromDate)
			AND (LEN(@requestToDate) = 0 OR ms.OfficialResponseDate <= @requestToDate)
		ORDER BY
			ms.OfficialResponseDate		DESC
			,ms.OfficialResponseTime	DESC
	END
END
